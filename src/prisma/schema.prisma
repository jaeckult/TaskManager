// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


enum TaskStatus{
  TODO
  COMPLETED
  CANCELLED
  EXPIRED
}


model Task{

  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  projectId Int?
  project Project? @relation(fields: [projectId], references: [id])
  title String
  description String
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status TaskStatus @default(TODO)
  date DateTime @default(now())
}

model User{
  id Int @id @default(autoincrement())
  username String @unique
  password String 
  email String @unique
  tasks Task[]
  ownedProjects Project[] @relation("ProjectOwner")
  sharedProjects ProjectSharedUser[]
  sentShareRequests ProjectShareRequest[] @relation("ShareRequestFrom")
  receivedShareRequests ProjectShareRequest[] @relation("ShareRequestTo")
}

model Project{
  id Int @id @default(autoincrement())
  title String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId Int
  owner User @relation("ProjectOwner", fields: [ownerId], references: [id])
  tasks Task[]
  sharedWith ProjectSharedUser[]
  shareRequests ProjectShareRequest[]
}

model ProjectSharedUser {
  id Int @id @default(autoincrement())
  projectId Int
  userId Int
  project Project @relation(fields: [projectId], references: [id])
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
}

model ProjectShareRequest {
  id Int @id @default(autoincrement())
  projectId Int
  fromUserId Int
  toUserId Int
  status String // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project Project @relation(fields: [projectId], references: [id])
  fromUser User @relation("ShareRequestFrom", fields: [fromUserId], references: [id])
  toUser User @relation("ShareRequestTo", fields: [toUserId], references: [id])
}



